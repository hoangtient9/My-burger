{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.scss","containers/Auth/Auth.module.scss","containers/Auth/Auth.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","inValid","shouldValidate","touched","push","InValid","elementType","elementConfig","className","join","value","onChange","changed","options","map","option","key","displayValue","Label","name","module","exports","Auth","React","memo","useState","email","type","placeholder","validation","required","isEmail","valid","password","minLength","maxLength","authForm","setAuthForm","isSignup","setIsSignup","formIsValid","setFormIsValid","dispatch","useDispatch","onSetAuthRedirectPath","useCallback","actions","loading","useSelector","state","auth","error","isAuthenticated","token","authRedirectPath","buildingBurger","burgerBuilder","building","useEffect","formElementsArray","id","config","form","onSubmit","event","preventDefault","onAuth","formElement","inputIdentifier","updatedFormElement","updateObject","target","checckValidity","updatedAuthForm","formChangedHandler","btnType","disabled","btnAuth","message","authRedirect","to","clicked"],"mappings":"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","file":"static/js/4.41a29f40.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.scss';\r\n\r\nconst Input = props => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n    if (props.inValid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.InValid)\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case 'input':\r\n            inputElement = <input {...props.elementConfig} className={inputClasses.join(' ')} value={props.value} onChange={props.changed}/>\r\n            break;\r\n        case 'textarea':\r\n            inputElement = <textarea {...props.elementConfig} className={inputClasses.join(' ')} onChange={props.changed}/>\r\n            break;\r\n        case 'select':\r\n            inputElement = <select value={props.value} className={inputClasses.join(' ')} onChange={props.changed}>\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                ))}\r\n            </select>\r\n            break;\r\n        default: inputElement = <input {...props.elementConfig} className={inputClasses.join(' ')} value={props.value} onChange={props.changed}/>\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.name}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3JdE-\",\"Label\":\"Input_Label__1o8lB\",\"InputElement\":\"Input_InputElement__2gTo7\",\"InValid\":\"Input_InValid__3IGl0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1BwRh\"};","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useDispatch, useSelector} from 'react-redux';\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport classes from './Auth.module.scss';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport * as actions from '../../store/actions/index';\r\nimport {updateObject, checckValidity} from '../../shared/ultility';\r\n\r\nconst Auth = React.memo(props => {\r\n  const [authForm, setAuthForm] = useState(\r\n    {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"E-mail\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\",\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 8,\r\n          maxLength: 50,\r\n        },\r\n        valid: false,\r\n        touched: false,\r\n      }\r\n    }\r\n  )\r\n  const [isSignup, setIsSignup] = useState(true);\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n  const dispatch = useDispatch();\r\n\r\n  const onAuth = (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup));\r\n  const onSetAuthRedirectPath = useCallback(() => dispatch(actions.setAuthRedirectPath('/')), [dispatch]);\r\n\r\n  const loading = useSelector(state => state.auth.loading);\r\n  const error = useSelector(state => state.auth.error); \r\n  const isAuthenticated = useSelector(state => state.auth.token != null);\r\n  const authRedirectPath = useSelector(state => state.auth.authRedirectPath); \r\n  const buildingBurger = useSelector(state => state.burgerBuilder.building); \r\n\r\n  useEffect(() => {\r\n    if(!buildingBurger && authRedirectPath !== '/') {\r\n      onSetAuthRedirectPath()\r\n    }\r\n  }, [buildingBurger, authRedirectPath, onSetAuthRedirectPath])\r\n\r\n  const authHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    onAuth(authForm.email.value, authForm.password.value, isSignup)\r\n  };\r\n\r\n  const formChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(authForm[inputIdentifier], {\r\n      value: event.target.value,\r\n      valid: checckValidity(\r\n        event.target.value,\r\n        authForm[inputIdentifier].validation\r\n        ),\r\n        touched: true\r\n      })\r\n      \r\n      const updatedAuthForm = updateObject(authForm, {\r\n        [inputIdentifier]: updatedFormElement\r\n      });\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedAuthForm) {\r\n      formIsValid = updatedAuthForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n\r\n    setFormIsValid(formIsValid)\r\n    setAuthForm(updatedAuthForm)\r\n  };\r\n\r\n  const switchAuthModeHandler = () => {\r\n    setIsSignup(!isSignup)\r\n  }\r\n\r\n  const formElementsArray = [];\r\n  for (let key in authForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: authForm[key],\r\n    });\r\n  }\r\n\r\n  let form = (\r\n    <form onSubmit={authHandler}>\r\n      {formElementsArray.map((formElement) => (\r\n        <Input\r\n          key={formElement.id}\r\n          elementType={formElement.config.elementType}\r\n          elementConfig={formElement.config.elementConfig}\r\n          value={formElement.config.value}\r\n          changed={(event) => formChangedHandler(event, formElement.id)}\r\n          inValid={!formElement.config.valid}\r\n          shouldValidate={formElement.config.validation}\r\n          touched={formElement.config.touched}\r\n        />\r\n      ))}\r\n      <Button btnType=\"Success\" disabled={!formIsValid} btnAuth='BtnAuth'>\r\n        {isSignup ? 'SIGN UP' : 'SIGN IN'}\r\n      </Button>\r\n      \r\n    </form>\r\n    \r\n  );\r\n\r\n  if (loading) {\r\n    form = <Spinner />;\r\n  }\r\n  let message = null;\r\n\r\n  if (error) {\r\n    message = <p>{error.message}</p>\r\n  }\r\n  let authRedirect = null;\r\n  if (isAuthenticated) {\r\n\r\n    authRedirect = <Redirect to={authRedirectPath}/>\r\n  }\r\n  return (\r\n    <div className={classes.Auth}>\r\n      {authRedirect}\r\n      {message}\r\n      {form}\r\n      <Button btnType=\"Success\" clicked={switchAuthModeHandler}>\r\n    {isSignup ? 'Sign In' : 'Sign Up'}\r\n  </Button>\r\n    </div>\r\n  );\r\n})\r\n\r\nexport default Auth;\r\n"],"sourceRoot":""}