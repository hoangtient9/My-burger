{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.scss","components/Order/CheckoutSummary/CheckoutSummary.module.scss","containers/Checkout/ContactData/ContactData.module.scss","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["Input","props","inputElement","inputClasses","classes","InputElement","inValid","shouldValidate","touched","push","InValid","elementType","elementConfig","className","join","value","onChange","changed","options","map","option","key","displayValue","Label","name","module","exports","CheckoutSummary","style","width","margin","Burger","ingrediented","ingredients","Button","btnType","clicked","checkoutCancel","checkoutContinue","ContactData","React","memo","useState","type","placeholder","validation","required","minLength","maxLength","valid","email","isEmail","street","zipCode","country","deliveryMethod","orderForm","setOrderForm","formIsValid","setFormIsValid","dispatch","useDispatch","onBurgerOrder","useCallback","orderData","token","orderActions","ings","useSelector","state","burgerBuilder","price","totalPrice","loading","order","auth","userId","formElementsArray","id","config","form","onSubmit","event","preventDefault","formData","formElementIdentifier","formElement","inputIdentifier","updatedFormElement","updateObject","target","checckValidity","updatedOrderForm","formChangedHandler","disabled","Spinner","withErrorhandler","axios","Checkout","purchased","summary","to","purchasedRedirect","history","goBack","replace","path","match","component"],"mappings":"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","file":"static/js/3.41af39f9.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.scss';\r\n\r\nconst Input = props => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.InputElement];\r\n    if (props.inValid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.InValid)\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case 'input':\r\n            inputElement = <input {...props.elementConfig} className={inputClasses.join(' ')} value={props.value} onChange={props.changed}/>\r\n            break;\r\n        case 'textarea':\r\n            inputElement = <textarea {...props.elementConfig} className={inputClasses.join(' ')} onChange={props.changed}/>\r\n            break;\r\n        case 'select':\r\n            inputElement = <select value={props.value} className={inputClasses.join(' ')} onChange={props.changed}>\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                ))}\r\n            </select>\r\n            break;\r\n        default: inputElement = <input {...props.elementConfig} className={inputClasses.join(' ')} value={props.value} onChange={props.changed}/>\r\n            break;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.name}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3JdE-\",\"Label\":\"Input_Label__1o8lB\",\"InputElement\":\"Input_InputElement__2gTo7\",\"InValid\":\"Input_InValid__3IGl0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__-y1Eb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2AR1G\"};","import React from 'react';\r\nimport classes from './CheckoutSummary.module.scss';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button'\r\n\r\nconst CheckoutSummary = props => (\r\n    <div className={classes.CheckoutSummary}>\r\n        <h2>Your Burger</h2>\r\n        <div style={{width: '100%', margin: 'auto'}}>\r\n            <Burger ingrediented={props.ingredients}/>\r\n        </div>\r\n        <Button btnType='Danger' clicked={props.checkoutCancel}>Cancel</Button>\r\n        <Button btnType='Success' clicked={props.checkoutContinue}>Continue</Button>\r\n    </div>\r\n\r\n)\r\n\r\nexport default CheckoutSummary;","import React, {useState, useCallback} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\nimport classes from './ContactData.module.scss';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport axios from '../../../axios-orders'\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport * as orderActions from '../../../store/actions/index';\r\nimport withErrorhandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport {updateObject, checckValidity} from '../../../shared/ultility';\r\n\r\nconst ContactData = React.memo(props =>  {\r\n  const [orderForm, setOrderForm] = useState(\r\n    {\r\n      name: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Your Name'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 200\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      email: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'email',\r\n          placeholder: 'E-mail'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      street: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Your address'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      zipCode: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Zip Code'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      country: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Country'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      deliveryMethod: {\r\n        elementType: 'select',\r\n        elementConfig: {\r\n          options: [\r\n            {value: 'fastest', displayValue: 'Fastest'},\r\n            {value: 'cheapest', displayValue: 'Cheapest'}\r\n          ]\r\n        },\r\n        value: 'fastest',\r\n        valid: true,\r\n        validation: {}\r\n      },\r\n    }\r\n  ) \r\n  const [formIsValid, setFormIsValid] = useState(false)\r\n\r\n  const dispatch = useDispatch();\r\n  const onBurgerOrder = useCallback((orderData, token) => dispatch(orderActions.purchaseBurger(orderData, token)), [dispatch]);\r\n\r\n  const ings = useSelector(state => state.burgerBuilder.ingredients);\r\n  const price = useSelector(state => state.burgerBuilder.totalPrice); \r\n  const loading = useSelector(state => state.order.loading);\r\n  const token = useSelector(state =>  state.auth.token);\r\n  const userId = useSelector(state => state.auth.userId); \r\n  \r\n  const orderHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {};\r\n    for (let formElementIdentifier in orderForm) {\r\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value\r\n    }\r\n\r\n    const order = {\r\n      ingredients: ings,\r\n      totalPrice: price,\r\n      orderData: formData,\r\n      userId: userId\r\n    };\r\n\r\n    onBurgerOrder(order, token);\r\n  }\r\n\r\n  const formChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(orderForm[inputIdentifier], {\r\n      value: event.target.value,\r\n      valid : checckValidity(event.target.value, orderForm[inputIdentifier].validation),\r\n      touched: true\r\n    })\r\n    \r\n    const updatedOrderForm = updateObject(orderForm, {\r\n      [inputIdentifier]: updatedFormElement\r\n    });\r\n\r\n    let formIsValid = true;\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n    }\r\n\r\n    setOrderForm(updatedOrderForm)\r\n    setFormIsValid(formIsValid)\r\n  }\r\n\r\n  const formElementsArray = [];\r\n  for (let key in orderForm) {\r\n    formElementsArray.push({\r\n      id: key,\r\n      config: orderForm[key]\r\n    })\r\n  }\r\n\r\n  let form = (\r\n    <form onSubmit={orderHandler}>\r\n      {formElementsArray.map(formElement =>   \r\n          <Input \r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType} \r\n            elementConfig={formElement.config.elementConfig} \r\n            value={formElement.config.value} \r\n            changed={event => formChangedHandler(event, formElement.id)}\r\n            inValid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}/> \r\n      )}\r\n      <Button btnType='Success' disabled={!formIsValid}>Order</Button>\r\n    </form>\r\n  )\r\n\r\n  if (loading) {\r\n    form = <Spinner />\r\n  }\r\n  return (\r\n    <div className={classes.ContactData}>\r\n      <h4>Enter your contact data</h4>\r\n      {form}\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default withErrorhandler(ContactData, axios);","import React from 'react';\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport { useSelector} from 'react-redux';\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n\r\nconst Checkout = React.memo(props => {\r\n\r\n  const ings = useSelector(state => state.burgerBuilder.ingredients);\r\n  const purchased = useSelector(state => state.order.purchased);\r\n\r\n  const checkoutCancellHandler = () => {\r\n    props.history.goBack()\r\n  }\r\n\r\n  const checkoutContinueHandler = () => {\r\n    props.history.replace('/checkout/contact-data')\r\n  }\r\n\r\n  let summary = <Redirect to='/'/>;\r\n  if (ings) {\r\n    const purchasedRedirect = purchased ? <Redirect to='/' /> : null;\r\n    summary = (\r\n      <div>\r\n        {purchasedRedirect}\r\n        <CheckoutSummary \r\n          ingredients={ings} \r\n          checkoutCancel={checkoutCancellHandler} \r\n          checkoutContinue={checkoutContinueHandler}/>\r\n\r\n        <Route \r\n          path={props.match.path + '/contact-data'} \r\n          component={ContactData}/>\r\n      </div>\r\n    )\r\n  }\r\n  return summary;\r\n})\r\n\r\nexport default Checkout;"],"sourceRoot":""}